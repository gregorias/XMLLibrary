import groovy.swing.SwingBuilder

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'pmd'

def DEPENDENCY_LIB_DIRECTORY = 'lib/'
def SCHEMA_LOCATION = "resources/config/library.xsd"
def JAXB_BINDINGS_LOCATION = "resources/config/bindings.xjb"
def MAIN_SOURCE_DIRECTORY = "src/main/java"

group = 'me.gregorias'
version = '0.0.1'

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
  compile group: 'org.controlsfx', name: 'controlsfx', version: '8.20.8'
  compile group: 'org.glassfish.jersey.core',
    name: 'jersey-server', version: '2.13'
  compile group: 'org.glassfish.jersey.containers',
    name: 'jersey-container-grizzly2-http', version: '2.13'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
  runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
}

task generateJAXBClasses << {
  ("xjc $SCHEMA_LOCATION -d $MAIN_SOURCE_DIRECTORY " +
  "-p me.gregorias.xmllibrary.library.jaxb -b $JAXB_BINDINGS_LOCATION " +
  "-extension").execute()
}

compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

compileTestJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

jar {
  from processResources.destinationDir
  manifest {
    attributes 'Main-Class': 'me.gregorias.xmllibrary.Main',
               'Class-Path': generateClassPath(configurations.runtime,
                 DEPENDENCY_LIB_DIRECTORY)
  }
}

javadoc {
  exclude "**/jaxb/*.java"
}

checkstyle {
  toolVersion = "6.1.1"
}

jacoco {
  toolVersion = '0.7.2.201409121644'
}

jacocoTestReport {
  dependsOn test
  reports {
    html.enabled true
  }
}

task jarJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task jarSource(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jarSource
  archives jarJavadoc
}

task copyRuntimeDependencies(type: Copy) {
  from configurations.runtime
  into DEPENDENCY_LIB_DIRECTORY
}

findbugs {
  effort = "max"
  reportLevel = "low"
  toolVersion = "3.0.0"
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/* Generate gradlew and gradle wrappers for portable gradle use */
task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

def generateClassPath(configurationSet, prefix) {
  configurationSet.collect { prefix + it.getName() }.join(" ")
}
